// Generated by CoffeeScript 1.10.0
var closekeyboard, e, error, loadMisspellDictionary, misspell, path, revspellcheck;

loadMisspellDictionary = function(path, callback) {
  var request;
  request = new XMLHttpRequest;
  request.overrideMimeType('application/json');
  request.open('GET', path, true);
  request.onreadystatechange = function() {
    if (request.readyState === 4 && request.status === '200') {
      callback(JSON.parse(request.responseText));
    }
  };
  return request.send(null);
};

if (typeof require !== "undefined" && require !== null) {
  revspellcheck = require("./reverse-spellcheck.json");
  closekeyboard = require("./keyboard-close.json");
} else {
  if (typeof misspellDependencies !== "undefined" && misspellDependencies !== null) {
    revspellcheck = misspellDependencies.revspellcheck;
    closekeyboard = misspellDependencies.closekeyboard;
  } else {
    loadMisspellDictionary("reverse-spellcheck.json", (function(_this) {
      return function(json) {
        return revspellcheck = json;
      };
    })(this));
    loadMisspellDictionary("keyboard-close.json", (function(_this) {
      return function(json) {
        return closekeyboard = json;
      };
    })(this));
  }
}

if ((revspellcheck != null) && (closekeyboard != null)) {
  if (typeof console !== "undefined" && console !== null) {
    if (typeof console.info === "function") {
      console.info("Misspell: Dependencies loaded.");
    }
  }
} else {
  if (typeof console !== "undefined" && console !== null) {
    if (typeof console.info === "function") {
      console.info("Misspell: Could not load needed dependencies. This could be for many reasons. Please refer to the README for more information. (https://github.com/soops/misspell#misspell)");
    }
  }
}

misspell = function(text, caps, capsTypes, misspellPercent) {
  var capsType, i, j, k, l, len, len1, len2, len3, letter, letterHasBeenRemoved, letterToRemove, letterToRemoveIndex, letterToReplace, letterToReplaceIndex, letterToSwap, letterToSwapIndex, letters, lettersCheckedForRemoval, m, misspellType, newWords, randomCapLetter, startCaps, upperPartOfWord, w, word, words, wordx, x;
  words = text.split(" ");
  if (capsTypes != null) {
    capsType = capsTypes[misspell.random(0, capsTypes.length)];
  } else {
    capsType = misspell.random(1, 7);
  }
  newWords = [];
  startCaps = null;
  if (misspellPercent != null) {
    null;
  } else {
    misspellPercent = 10;
  }
  for (w = j = 0, len = words.length; j < len; w = ++j) {
    word = words[w];
    letters = word.split("");
    if (misspell.random(0, 101) <= misspellPercent) {
      misspellType = misspell.random(1, 5);
      switch (misspellType) {
        case 1:
          letterToSwapIndex = misspell.random(0, letters.length - 1);
          letterToSwap = letters[letterToSwapIndex];
          letters[letterToSwapIndex] = letters[letterToSwapIndex + 1];
          letters[letterToSwapIndex + 1] = letterToSwap;
          break;
        case 2:
          if (revspellcheck[word] != null) {
            words[w] = revspellcheck[word];
          } else {
            for (x = k = 0, len1 = words.length; k < len1; x = ++k) {
              wordx = words[x];
              if (revspellcheck[wordx] != null) {
                words[x] = revspellcheck[wordx];
                break;
              }
            }
          }
          break;
        case 3:
          letterHasBeenRemoved = false;
          lettersCheckedForRemoval = 0;
          while (!(letterHasBeenRemoved === true || lettersCheckedForRemoval === letters.length)) {
            letterToRemoveIndex = misspell.random(0, letters.length);
            letterToRemove = letters[letterToRemoveIndex];
            letters[letterToRemoveIndex] = "";
            letterHasBeenRemoved = true;
            lettersCheckedForRemoval += 1;
          }
          break;
        case 4:
          letterToReplaceIndex = misspell.random(0, letters.length);
          letterToReplace = letters[letterToReplaceIndex];
          if (closekeyboard[letterToReplace] != null) {
            letters[letterToReplaceIndex] = closekeyboard[letterToReplace][misspell.random(0, closekeyboard[letterToReplace].length)];
          }
      }
    }
    if (caps === true) {
      if (startCaps !== true) {
        switch (capsType) {
          case 1:
            letters[0] = letters[0].toUpperCase();
            break;
          case 2:
            if (misspell.random(0, 2) === 0) {
              letters[0] = letters[0].toUpperCase();
            }
            break;
          case 3:
            letters = letters.join("").toUpperCase().split("");
            break;
          case 4:
            letters = letters.join("").toLowerCase().split("");
            break;
          case 5:
            for (i = l = 0, len2 = letters.length; l < len2; i = ++l) {
              letter = letters[i];
              randomCapLetter = misspell.random(0, 3);
              if (letters[i] != null) {
                switch (randomCapLetter) {
                  case 0:
                    letters[i] = letter.toUpperCase();
                    break;
                  case 1:
                    letters[i] = letter.toLowerCase();
                }
              }
            }
            break;
          case 6:
            for (i = m = 0, len3 = letters.length; m < len3; i = ++m) {
              letter = letters[i];
              if (misspell.random(0, text.length) === misspell.random(0, text.length) && startCaps !== true) {
                startCaps = true;
                upperPartOfWord = letters.slice(i, letters.length).join("").toUpperCase().split("");
                letters = letters.slice(0, i).concat(upperPartOfWord);
              }
            }
        }
      } else if (startCaps === true) {
        letters = letters.join("").toUpperCase().split("");
      }
    }
    newWords.push(letters.join(""));
  }
  return newWords.join(" ");
};

misspell.random = function(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
};

try {
  path = require("path");
  module.exports = misspell;
  if (path.basename(process.argv[1]) === "misspell.js") {
    if (process.argv[5] != null) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(misspell(String(process.argv[2]), String(process.argv[3]) === "true", JSON.parse(process.argv[4]), Number(process.argv[5])));
      }
    } else if (process.argv[4] != null) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(misspell(String(process.argv[2]), String(process.argv[3]) === "true", JSON.parse(process.argv[4])));
      }
    } else if (process.argv[3] != null) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(misspell(String(process.argv[2]), String(process.argv[3]) === "true"));
      }
    } else if (process.argv[2] != null) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(misspell(String(process.argv[2]), true));
      }
    } else if (process.argv[1] != null) {
      if (typeof console !== "undefined" && console !== null) {
        console.log("You just ran Misspell without any arguments. You can use Misspell like a CLI if you'd like, just put the arguments in the same order you would using it in JavaScript.");
      }
    }
  }
} catch (error) {
  e = error;
  if (typeof console !== "undefined" && console !== null) {
    if (typeof console.warn === "function") {
      console.warn("Misspell: " + e + ". This is mostly likely OK, and caused because you aren't using Node. Carry on!");
    }
  }
}
